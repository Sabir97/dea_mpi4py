# from pyDecision.algorithm import topsis_method
import numpy as np
from pyDecision.algorithm import fuzzy_ahp_method


# Function: TOPSIS
def topsis_method(dataset, weights, criterion_type):
    X = np.copy(dataset)
    w = np.copy(weights)
    # sum_cols = np.sum(X*X, axis = 0)
    # sum_cols = sum_cols**(1/2)  #sqrt
    # r_ij = X/sum_cols
    r_ij = np.zeros(X.shape)

    for j in range(X.shape[1]):
        aj = X[:,j]
        minj = np.min(aj)
        maxj = np.max(aj)
        r_ij[:,j] = (aj - minj)/(maxj - minj)


    v_ij = r_ij*w   # Weighted normalized values

    p_ideal_A = np.zeros(X.shape[1])
    n_ideal_A = np.zeros(X.shape[1])
    for i in range(0, dataset.shape[1]):
        if (criterion_type[i] == 'max'):
            p_ideal_A[i] =  1 # np.max(v_ij[:, i])
            n_ideal_A[i] = 0 # np.min(v_ij[:, i])
        else:
            p_ideal_A[i] = 0 # np.min(v_ij[:, i])
            n_ideal_A[i] = 1 # np.max(v_ij[:, i]) 
    p_s_ij = (v_ij - p_ideal_A)**2      #Ideal Solution
    p_s_ij = np.sum(p_s_ij, axis = 1)**(1/2)
    n_s_ij = (v_ij - n_ideal_A)**2      # Anti-ideal Solution (worst)
    n_s_ij = np.sum(n_s_ij, axis = 1)**(1/2)
    c_i    = n_s_ij / ( p_s_ij  + n_s_ij )

    for i in range(0, c_i.shape[0]):
        print('a' + str(i+1) + ': ' + str(round(c_i[i], 2)))
    # if ( graph == True):
    flow = np.copy(c_i)
    flow = np.reshape(flow, (c_i.shape[0], 1))
    flow = np.insert(flow, 0, list(range(1, c_i.shape[0]+1)), axis = 1)
    flow = flow[np.argsort(flow[:, 1])]
    flow = flow[::-1]

    print(flow)
        # ranking(flow)
    return c_i

fuzzy_comparison = np.array([
  [(1, 1, 1), (1/6, 1/5, 1/4), (2, 3, 4), (1/4, 1/3, 1/2), (2, 3, 4), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (1/4, 1/3, 1/2), (1/4, 1/3, 1/2), (1/3, 1/2, 1)],
  [(4, 5, 6), (1, 1, 1), (4, 5, 6), (1/4, 1/3, 1/2), (2, 3, 4), (2, 3, 4), (1, 2, 3), (1, 1, 1), (4, 5, 6), (2, 3, 4), (6, 7, 8), (2, 3, 4)],
  [(1/4, 1/3, 1/2), (1/6, 1/5, 1/4), (1, 1, 1), (1/4, 1/3, 1/2), (1, 1, 1), (4, 5, 6), (2, 3, 4), (1, 2, 3), (6, 7, 8), (2, 3, 4), (2, 3, 4), (1, 1, 1)],
  [(2, 3, 4), (2, 3, 4), (2, 3, 4), (1, 1, 1), (4, 5, 6), (6, 7, 8), (4, 5, 6), (1, 1, 1), (6, 7, 8), (5, 6, 7), (6, 7, 8), (3, 4, 5)],
  [(1/4, 1/3, 1/2), (1/4, 1/3, 1/2), (1, 1, 1), (1/6, 1/5, 1/4), (1, 1, 1), (2, 3, 4), (1, 2, 3), (1/2, 1, 2), (2, 3, 4), (4, 5, 6), (1, 2, 3), (1, 1, 1)],
  [(1, 1, 1), (1/4, 1/3, 1/2), (1/6, 1/5, 1/4), (1/8, 1/7, 1/6), (1/4, 1/3, 1/2), (1, 1, 1), (1/2, 1, 2), (1/7, 1/6, 1/5), (4, 5, 6), (1, 1, 1), (1, 1, 1), (1/2, 1, 2)],
  [(1, 2, 3), (1/2, 1, 2), (1/4, 1/3, 1/2), (1/6, 1/5, 1/4), (1/2, 1, 2), (1, 2, 3), (1, 1, 1), (1/6, 1/5, 1/4), (2, 3, 4), (1, 2, 3), (1, 2, 3), (1, 1, 1)],
  [(2, 3, 4), (1, 1, 1), (1/2, 1, 2), (1, 1, 1), (1, 2, 3), (5, 6, 7), (4, 5, 6), (1, 1, 1), (6, 7, 8), (4, 5, 6), (8, 9, 9), (4, 5, 6)],
  [(1/4, 1/3, 1/2), (1/6, 1/5, 1/4), (1/8, 1/7, 1/6), (1/8, 1/7, 1/6), (1/4, 1/3, 1/2), (1/6, 1/5, 1/4), (1/4, 1/3, 1/2), (1/8, 1/7, 1/6), (1, 1, 1), (1/4, 1/3, 1/2), (1, 2, 3), (1, 1, 1)],
  [(1/4, 1/3, 1/2), (1/4, 1/3, 1/2), (1/4, 1/3, 1/2), (1/7, 1/6, 1/5), (1/6, 1/5, 1/4), (1, 1, 1), (1/2, 1, 2), (1/6, 1/5, 1/4), (2, 3, 4), (1, 1, 1), (1, 2, 3), (1, 1, 1)],
  [(1/3, 1/2, 1), (1/8, 1/7, 1/6), (1/4, 1/3, 1/2), (1/8, 1/7, 1/6), (1/2, 1, 2), (1, 2, 3), (1/2, 1, 2), (1/9, 1/9, 1/8), (1/2, 1, 2), (1/2, 1, 2), (1, 1, 1), (1/2, 1, 2)],
  [(1/2, 1, 2), (1/4, 1/3, 1/2), (1, 1, 1), (1/3, 1/4, 1), (1, 1, 1), (1, 2, 3), (1, 1, 1), (1/6, 1/5, 1/4), (1, 1, 1), (1, 1, 1), (1, 2, 3), (1, 1, 1)]
])

# fuzzy_weights, defuzzified_weights, normalized_weights, cr = fuzzy_ahp_method(fuzzy_comparison)

# print(fuzzy_weights)

fuzzy_weights_saved = np.array([(0.03701058344616971, 0.06575957716223224, 0.11912335239546816), (0.08889475478626084, 0.14990227578428253, 0.2442800779823151), (0.051100996350419516, 0.08347290271365607, 0.13575849351008204), (0.14173913671638746, 0.22301915693277252, 0.34465414804485683), (0.03921134726192187, 0.06861931965410131, 0.11808202239320774), (0.023576098101634406, 0.0372806742700976, 0.06227484234986303), (0.030088058235725683, 0.05890105491177268, 0.10881440417083334), (0.10769845413056109, 0.17404203945787214, 0.27383550916458693), (0.013402706256769946, 0.021113033940896437, 0.0352587921951881), (0.021513537377422266, 0.03552216501837415, 0.06079964946588351), (0.017296068342748397, 0.033584953771554515, 0.0688471339361835), (0.03187718728168461, 0.04878284638238776, 0.08552249183768446)] )

# print(cr)

expert1 = np.array([
    #c1  c2  c3    c4  c5  c6    c7    c8  c9  c10 c11 c12
    [1,	1/5,	3,	1/3,	3,	1,	1/2,	1/3,	3,	3,	4,	2], #c1
    [5,	1,	5,	1/3, 3,	3,	2,	1,	5,	3,	7,	3], #c2
    [1/3,	1/5,	1,	1/3,	1,	5,	3,	2,	7,	3,	3,	1], #c3
    [3,	3,	3,	1,	5,	7,	5,	1,	7,	6,	7,	4], #c4
    [1/3,	1/3,	1,	1/5,	1,	3,	2,	1/2,	3,	5,	2,	1], #c5
    [1,	1/3,	1/5,	1/7,	1/3,	1,	1/2,	1/6,	5,	1,	1,	1/2], #c6
    [2,	1/2,	1/3,	1/5,	1/2,	2,	1,	1/5,	3,	2,	2,	1], #c7
    [3,	1,	1/2,	1,	2,	6,	5,	1,	7,	5,	9,	5], #c8
    [1/3,	1/5,	1/7,	1/7,	1/3,	1/5,	1/3,	1/7,	1,	1/3,	2,	1], #c9
    [1/3,	1/3,	1/3,	1/6,	1/5,	1,	1/2,	1/5,	3,	1,	2,	1], #c10
    [1/4,	1/7,	1/3,	1/7,	1/2,	1,	1/2,	1/9,	1/2,	1/2,	1,	1/2], #c11
    [1/2,	1/3,	1,	1/4,	1,	2,	1,	1/5,	1,	1,	2,	1]  #c12
])
# RC = 0.095 using geometric mean

expert2 = np.array([
    #c1        c2  c3         c4    c5      c6      c7      c8      c9      c10    c11    c12
    [1,  	 1/4,	3,    	 1/4,	3,    	1,    	 1/2,	 1/2,	3,    	3,    	4,    	2], #c1
    [4,    	1,    	5,    	 1/5,	3,    	4,    	2,    	1,    	5,    	3,    	7,    	3], #c2
    [1/3,	 1/5,	1,    	 1/3,	1,    	5,    	3,    	2,    	7,    	3,    	3,    	1], #c3
    [4,    	5,    	3,    	1,    	5,    	7,    	5,    	1,    	7,    	6,    	7,    	4], #c4
    [1/3,	 1/3,	1,    	 1/5,	1,    	3,    	2,    	 1/2,	3,    	5,    	2,    	1], #c5
    [1,    	 1/4,	 1/5,	 1/7,	 1/3,	1,    	 1/2,	 1/6,	5,    	1,    	1,    1/2], #c6
    [2,    	 1/2,	 1/3,	 1/5,	 1/2,	2,    	1,    	 1/5,	3,    	2,    	2,    	1], #c7
    [2,    	1,    	 1/2,	1,    	2,    	6,    	5,    	1,    	7,    	5,    	9,    	5], #c8
    [1/3,	 1/5,	 1/7,	 1/7,	 1/3,	1/5,	 1/3,	 1/7,	1,    	1/3,	2,    	1], #c9
    [1/3,	 1/3,	 1/3,	 1/6,	 1/5,	1,    	 1/2,	 1/5,	3,    	1,    	2,    	1], #c10
    [1/4,	 1/7,	 1/3,	 1/7,	 1/2,	1,    	 1/2,	 1/9,	1/2,	1/2,	1,    1/2], #c11
    [1/2,	 1/3,	1,    	 1/4,	1,    	2,    	1,    	 1/5,	1,    	1,    	2,    	1] #c12
])
# RC = 0.097 using geometric mean

expert3 = np.array([
    [1  , 	 1/6,	3   , 	 1/3,	3   , 	1   , 	 1/2,	 1/3,	3   , 	3   , 	4,    	2],    
    [6  , 	1   , 	4   , 	 1/3,	3   , 	3   , 	2   , 	1   , 	5   , 	3   , 	7,    	3],
    [1/4,	 1/5,	1   , 	 1/3,	1   , 	5   , 	3   , 	2   , 	7   , 	3   , 	3,    	1],
    [3  , 	3   , 	3   , 	1   , 	5   , 	7   , 	5   , 	1   , 	7   , 	6   , 	7,    	4],
    [1/3,	 1/3,	1   , 	 1/5,	1   , 	3   , 	2   , 	 1/2,	3   , 	5   , 	2,    	1],   
    [1  , 	 1/3,	 1/5,	 1/7,	 1/3,	1   , 	 1/2,	 1/6,	5   , 	 1/2,	1,    	 1/2],
    [2  , 	 1/2,	 1/3,	 1/5,	 1/2,	2   , 	1   , 	 1/5,	3   , 	2   , 	2,    	1],
    [3  , 	 1, 	 1/2,	1   , 	2   , 	6   , 	5   , 	1   , 	6   , 	5   , 	9,    	5],   
    [1/3,	 1/5,	 1/7,	 1/7,	 1/3,	 1/5,	 1/3,	 1/6,	1   , 	 1/3,	2,    	1],   
    [1/3,	 1/3,	 1/3,	 1/6,	 1/5,	2   , 	 1/2,	 1/5,	3   , 	1   , 	2,    	1 ],   
    [1/4,	 1/7,	 1/3,	 1/7,	 1/2,	1   , 	 1/2,	 1/9,	 1/2,	 1/2,	1,    	 1/2],
    [1/2,	 1/3,	1   , 	 1/4,	1   , 	2   , 	1   , 	 1/5,	1   , 	1   , 	2,    	1]   
])
# RC = 0.096 using geometric mean

expert4 = np.array([
            [1  ,  	 1/5,	3   , 	 1/4,	2   , 	1   , 	 1/2,	 1/4,	3   , 	3   , 	4,    	2],
            [5  ,  	1   , 	5   , 	 1/3,	3   , 	3   , 	2   , 	1   , 	5   , 	3   , 	7,    	3],
            [1/3,	 1/5,	1   , 	 1/3,	1   , 	5   , 	3   , 	2   , 	6   , 	3   , 	3,    	1],
            [4  ,  	3   , 	3   , 	1   , 	5   , 	7   , 	5   , 	1   , 	7   , 	6   , 	6,    	4],
            [1/2,	 1/3,	1   , 	 1/5,	1   , 	3   , 	2   , 	 1/2,	3   , 	5   , 	2,    	1],
            [1  ,  	 1/3,	 1/5,	 1/7,	 1/3,	1   , 	 1/2,	 1/6,	5   , 	1   , 	1,    	 1/2],
            [2  ,  	 1/2,	 1/3,	 1/5,	 1/2,	2   , 	1   , 	 1/4,	3   , 	2   , 	2,    	1],
            [4  ,  	1   , 	 1/2,	1   , 	2   , 	6   , 	4   , 	1   , 	7   , 	5   , 	7,    	5], #c8
            [1/3,	 1/5,	 1/6,	 1/7,	 1/3,	 1/5,	 1/3,	 1/7,	1   , 	 1/3,	1,    	2],#c9
            [1/3,	 1/3,	 1/3,	 1/6,	 1/5,	1   , 	 1/2,	 1/5,	3   , 	1   , 	2,    	1],
            [1/4,	 1/7,	 1/3,	 1/6,	 1/2,	1   , 	 1/2,	 1/7,	 1,	 1/2,	1,    	 1/2],  #c11
            [1/2,	 1/3,	1   , 	 1/4,	1   , 	2   , 	1   , 	 1/5,	 1/2,	1   , 	2,    	1]
])

expert5 = np.array([
            [1  ,  	 1/4,	2   , 	 1/3,	1   , 	1/2   , 	 1,	 1/3,	2   , 	2   , 	3,    	1],
            [4  ,  	1   , 	5   , 	 1/3,	3   , 	3   , 	2   , 	1   , 	5   , 	3   , 	7,    	3],
            [1/2,	 1/5,	1   , 	 1/3,	1   , 	5   , 	3   , 	2   , 	6   , 	3   , 	3,    	1],
            [3  ,  	3   , 	3   , 	1   , 	5   , 	7   , 	5   , 	1   , 	7   , 	6   , 	6,    	4],
            [1,	 1/3,	1   , 	 1/5,	1   , 	3   , 	2   , 	 1/2,	3   , 	5   , 	2,    	1],
            [2  ,  	 1/3,	 1/5,	 1/7,	 1/3,	1   , 	 1/2,	 1/6,	5   , 	1   , 	1,    	 1/2],
            [1  ,  	 1/2,	 1/3,	 1/5,	 1/2,	2   , 	1   , 	 1/4,	3   , 	2   , 	2,    	1],
            [3  ,  	1   , 	 1/2,	1   , 	2   , 	6   , 	4   , 	1   , 	7   , 	5   , 	7,    	5], #c8
            [1/2,	 1/5,	 1/6,	 1/7,	 1/3,	 1/5,	 1/3,	 1/7,	1   , 	 1/3,	1,    	2],#c9
            [1/2,	 1/3,	 1/3,	 1/6,	 1/5,	1   , 	 1/2,	 1/5,	3   , 	1   , 	2,    	1],
            [1/3,	 1/7,	 1/3,	 1/6,	 1/2,	1   , 	 1/2,	 1/7,	 1,	 1/2,	1,    	 1/2],  #c11
            [1,	 1/3,	1   , 	 1/4,	1   , 	2   , 	1   , 	 1/5,	 1/2,	1   , 	2,    	1]
])

expert6 = np.array([
            [1  ,  	 1/6,	3   , 	 1/4,	2   , 	1   , 	 1/2,	 1/4,	3   , 	3   , 	4,    	2],
            [6  ,  	1   , 	4   , 	 1/4,	2   , 	4   , 	1   , 	2   , 	6   , 	5   , 	6,    	2],
            [1/3,	 1/4,	1   , 	 1/3,	1   , 	5   , 	3   , 	2   , 	6   , 	3   , 	3,    	1],
            [4  ,  	   4, 	3   , 	1   , 	5   , 	7   , 	5   , 	1   , 	7   , 	6   , 	6,    	4],
            [1/2,	 1/2,	1   , 	 1/5,	1   , 	3   , 	2   , 	 1/2,	3   , 	5   , 	2,    	1],
            [1  ,  	 1/4,	 1/5,	 1/7,	 1/3,	1   , 	 1/2,	 1/6,	5   , 	1   , 	1,    	 1/2],
            [2  ,  	 1,	 1/3,	 1/5,	 1/2,	2   , 	1   , 	 1/4,	3   , 	2   , 	2,    	1],
            [4  ,  	  1/2, 	 1/2,	1   , 	2   , 	6   , 	4   , 	1   , 	7   , 	5   , 	7,    	5], #c8
            [1/3,	 1/6,	 1/6,	 1/7,	 1/3,	 1/5,	 1/3,	 1/7,	1   , 	 1/3,	1,    	2],#c9
            [1/3,	 1/5,	 1/3,	 1/6,	 1/5,	1   , 	 1/2,	 1/5,	3   , 	1   , 	2,    	1],
            [1/4,	 1/6,	 1/3,	 1/6,	 1/2,	1   , 	 1/2,	 1/7,	 1,	 1/2,	1,    	 1/2],  #c11
            [1/2,	 1/2,	1   , 	 1/4,	1   , 	2   , 	1   , 	 1/5,	 1/2,	1   , 	2,    	1]
])


collective_matrix = np.zeros((expert1.shape[0],expert1.shape[0]))

k = 6

for i in range(0, expert1.shape[0]):
    for j in range(0, expert1.shape[0]):
        collective_matrix[i,j] = (expert1[i,j] + expert2[i,j] + expert3[i,j] + expert4[i,j] + expert5[i,j] + expert6[i,j])/k

print(collective_matrix)

saved_collective_matrix = np.array([
[1.         , 0.20555556, 2.83333333, 0.29166667, 2.33333333, 0.91666667,
  0.58333333, 0.33333333, 2.83333333, 2.83333333, 3.83333333, 1.83333333],
 [5.        , 1.        , 4.66666667, 0.29722222, 2.83333333, 3.33333333,
  1.83333333, 1.16666667, 5.16666667, 3.33333333, 6.83333333, 2.83333333],
 [0.34722222, 0.20833333, 1.        , 0.33333333, 1.        , 5,
  3.        , 2.        , 6.5       , 3.        , 3.        , 1        ],
 [3.5       , 3.5       , 3.        , 1.        , 5.        , 7,
  5.        , 1.        , 7.        , 6.        , 6.5       , 4        ],
 [0.5       , 0.36111111, 1.        , 0.2       , 1.        , 3,
  2.        , 0.5       , 3.        , 5.        , 2.        , 1        ],
 [1.16666667, 0.30555556, 0.2       , 0.14285714, 0.33333333, 1,
  0.5       , 0.16666667, 5.        , 0.91666667, 1.        , 0.5       ],
 [1.83333333, 0.58333333, 0.33333333, 0.2       , 0.5       , 2,
  1.        , 0.225     , 3.        , 2.        , 2.        , 1        ],
 [3.16666667, 0.91666667, 0.5       , 1.        , 2.        , 6,
  4.5       , 1.        , 6.83333333, 5.        , 8.        , 5        ],
 [0.36111111, 0.19444444, 0.1547619 , 0.14285714, 0.33333333, 0.2,
  0.33333333, 0.1468254 , 1.        , 0.33333333, 1.5       , 1.5       ],
 [0.36111111, 0.31111111, 0.33333333, 0.16666667, 0.2       , 1.16666667,
  0.5       , 0.2       , 3.        , 1.        , 2.        , 1        ],
 [0.26388889, 0.1468254 , 0.33333333, 0.1547619 , 0.5       , 1,
  0.5       , 0.12698413, 0.75      , 0.5       , 1.        , 0.5       ],
 [0.58333333, 0.36111111, 1.        , 0.25      , 1.        , 2,
  1.        , 0.2       , 0.75      , 1.        , 2.        , 1        ]]
  )

m = 12

d = np.sum(collective_matrix, axis=1)/(m-1)

print(d)

w = d/np.sum(d)

print(f'Weights: {w}')

print(f'Sum of weights: {np.sum(w)}')


# Dataset 3
dataset3 = np.array([
        [12,	8,	500,	2,	17,	20,	16,	32,	1,	13,	100,	10],
        [37,	30,	3938,	19,	20,	15,	14,	10,	0.8,	366,	25,	2.5],
        [44,	23,	4401,	13,	19,	18,	20,	22,	0.6,	486,	50,	5],
        [29,	11,	3477,	5,	18,	9,	22,	31,	0.3,	198,	20,	2],
        [38,	10,	5029,	3,	17,	11,	10,	19,	1,	103,	500,	200],
        [24,	18,	1846,	9,	21,	13,	18,	28,	0.8,	232,	20,	2]
])

# Criterion Type: 'max' or 'min'
criterion_type = np.array(['max', 'max', 'min', 'max', 'min', 'min', 'min', 'min', 'max', 'min', 'max','max'])



print(topsis_method(dataset3, w, criterion_type))

